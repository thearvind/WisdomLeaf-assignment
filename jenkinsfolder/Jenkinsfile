pipeline {
	agent any
		environment {
					AWS_ACCOUNT_ID=”MY_ACCOUNT_ID_HERE”
					AWS_DEFAULT_REGION=”CREATED_AWS_ECR_CONTAINER_REPO_REGION”
					IMAGE_REPO_NAME=”ECR_REPO_NAME”
					IMAGE_TAG=”latest”
					REPOSITORY_URI = “${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}”
		}
		agent {
				docker {
					image 'maven:3-alpine' 
					args '-v /root/.m2:/root/.m2' 
        }		

stages {

	stage(‘Logging into AWS ECR service’) {
		steps {
				script {
						 sh “aws ecr get-login-password — region ${AWS_DEFAULT_REGION} | docker login — username AWS — password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com”
					  }
			}
	}

// Cloning the repo
	stage(‘Cloning Git’) {
		steps {
			checkout([$class: ‘GitSCM’, branches: [[name: ‘*/master’]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: ‘’, url: ‘https://github.com/thearvind/WisdomLeaf-assignment’]]])
		}
	}

    stage('Build') { 
        steps {
                sh 'mvn -B -DskipTests clean package' 
            }
    }
       
	stage('Test') {
        steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
    }
	
    stage('Running Script for Maven') {
        steps {
                sh './jenkins/scripts/deliver.sh'
           }
    } 

// now Building Docker images
	stage(‘Building image’) {
		steps{
			script {
					dockerImage = docker.build “${IMAGE_REPO_NAME}:${IMAGE_TAG}"
			}
		}
	}

// Uploading Docker images into AWS ECR
	stage(‘Pushing to ECR’) {
		steps{
			script {
					sh “docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG”
					sh “docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}”
				}
			}
	}
}
}